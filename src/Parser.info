-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_expParser -> Expr                           (0)
	Expr -> Term '+' Expr                              (1)
	Expr -> Term                                       (2)
	Term -> Factor '*' Term                            (3)
	Term -> Factor                                     (4)
	Factor -> int                                      (5)
	Factor -> var                                      (6)
	Factor -> '(' Expr ')'                             (7)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TNumber $$ }
	var            { TVar $$ }
	'+'            { TAdd }
	'*'            { TMul }
	'('            { TLParen }
	')'            { TRParen }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_expParser rule  0
	Expr            rules 1, 2
	Term            rules 3, 4
	Factor          rules 5, 6, 7

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_expParser -> . Expr                          (rule 0)

	int            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 6

	Expr           goto state 7
	Term           goto state 8
	Factor         goto state 3

State 1

	Expr -> . Term '+' Expr                             (rule 1)

	int            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 6

	Term           goto state 2
	Factor         goto state 3

State 2

	Expr -> Term . '+' Expr                             (rule 1)

	'+'            shift, and enter state 9


State 3

	Term -> Factor . '*' Term                           (rule 3)
	Term -> Factor .                                    (rule 4)

	'+'            reduce using rule 4
	'*'            shift, and enter state 11
	')'            reduce using rule 4
	%eof           reduce using rule 4


State 4

	Factor -> int .                                     (rule 5)

	'+'            reduce using rule 5
	'*'            reduce using rule 5
	')'            reduce using rule 5
	%eof           reduce using rule 5


State 5

	Factor -> var .                                     (rule 6)

	'+'            reduce using rule 6
	'*'            reduce using rule 6
	')'            reduce using rule 6
	%eof           reduce using rule 6


State 6

	Factor -> '(' . Expr ')'                            (rule 7)

	int            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 6

	Expr           goto state 10
	Term           goto state 8
	Factor         goto state 3

State 7

	%start_expParser -> Expr .                          (rule 0)

	%eof           accept


State 8

	Expr -> Term . '+' Expr                             (rule 1)
	Expr -> Term .                                      (rule 2)

	'+'            shift, and enter state 9
	')'            reduce using rule 2
	%eof           reduce using rule 2


State 9

	Expr -> Term '+' . Expr                             (rule 1)

	int            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 6

	Expr           goto state 14
	Term           goto state 8
	Factor         goto state 3

State 10

	Factor -> '(' Expr . ')'                            (rule 7)

	')'            shift, and enter state 13


State 11

	Term -> Factor '*' . Term                           (rule 3)

	int            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 6

	Term           goto state 12
	Factor         goto state 3

State 12

	Term -> Factor '*' Term .                           (rule 3)

	'+'            reduce using rule 3
	')'            reduce using rule 3
	%eof           reduce using rule 3


State 13

	Factor -> '(' Expr ')' .                            (rule 7)

	'+'            reduce using rule 7
	'*'            reduce using rule 7
	')'            reduce using rule 7
	%eof           reduce using rule 7


State 14

	Expr -> Term '+' Expr .                             (rule 1)

	')'            reduce using rule 1
	%eof           reduce using rule 1


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 8
Number of terminals: 6
Number of non-terminals: 4
Number of states: 15
