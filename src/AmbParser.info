-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from src/AmbParser.y
-----------------------------------------------------------------------------

state 11 contains 2 shift/reduce conflicts.
state 12 contains 2 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_expParser -> Expr                           (0)
	Expr -> Expr '+' Expr                              (1)
	Expr -> Expr '*' Expr                              (2)
	Expr -> int                                        (3)
	Expr -> var                                        (4)
	Expr -> '(' Expr ')'                               (5)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TNumber $$ }
	var            { TVar $$ }
	'+'            { TAdd }
	'*'            { TMul }
	'('            { TLParen }
	')'            { TRParen }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_expParser rule  0
	Expr            rules 1, 2, 3, 4, 5

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_expParser -> . Expr                          (rule 0)

	int            shift, and enter state 3
	var            shift, and enter state 4
	'('            shift, and enter state 5

	Expr           goto state 6

State 1

	Expr -> . Expr '+' Expr                             (rule 1)

	int            shift, and enter state 3
	var            shift, and enter state 4
	'('            shift, and enter state 5

	Expr           goto state 2

State 2

	Expr -> Expr . '+' Expr                             (rule 1)
	Expr -> Expr . '*' Expr                             (rule 2)

	'+'            shift, and enter state 7
	'*'            shift, and enter state 8


State 3

	Expr -> int .                                       (rule 3)

	'+'            reduce using rule 3
	'*'            reduce using rule 3
	')'            reduce using rule 3
	%eof           reduce using rule 3


State 4

	Expr -> var .                                       (rule 4)

	'+'            reduce using rule 4
	'*'            reduce using rule 4
	')'            reduce using rule 4
	%eof           reduce using rule 4


State 5

	Expr -> '(' . Expr ')'                              (rule 5)

	int            shift, and enter state 3
	var            shift, and enter state 4
	'('            shift, and enter state 5

	Expr           goto state 9

State 6

	%start_expParser -> Expr .                          (rule 0)
	Expr -> Expr . '+' Expr                             (rule 1)
	Expr -> Expr . '*' Expr                             (rule 2)

	'+'            shift, and enter state 7
	'*'            shift, and enter state 8
	%eof           accept


State 7

	Expr -> Expr '+' . Expr                             (rule 1)

	int            shift, and enter state 3
	var            shift, and enter state 4
	'('            shift, and enter state 5

	Expr           goto state 12

State 8

	Expr -> Expr '*' . Expr                             (rule 2)

	int            shift, and enter state 3
	var            shift, and enter state 4
	'('            shift, and enter state 5

	Expr           goto state 11

State 9

	Expr -> Expr . '+' Expr                             (rule 1)
	Expr -> Expr . '*' Expr                             (rule 2)
	Expr -> '(' Expr . ')'                              (rule 5)

	'+'            shift, and enter state 7
	'*'            shift, and enter state 8
	')'            shift, and enter state 10


State 10

	Expr -> '(' Expr ')' .                              (rule 5)

	'+'            reduce using rule 5
	'*'            reduce using rule 5
	')'            reduce using rule 5
	%eof           reduce using rule 5


State 11

	Expr -> Expr . '+' Expr                             (rule 1)
	Expr -> Expr . '*' Expr                             (rule 2)
	Expr -> Expr '*' Expr .                             (rule 2)

	'+'            shift, and enter state 7
			(reduce using rule 2)

	'*'            shift, and enter state 8
			(reduce using rule 2)

	')'            reduce using rule 2
	%eof           reduce using rule 2


State 12

	Expr -> Expr . '+' Expr                             (rule 1)
	Expr -> Expr '+' Expr .                             (rule 1)
	Expr -> Expr . '*' Expr                             (rule 2)

	'+'            shift, and enter state 7
			(reduce using rule 1)

	'*'            shift, and enter state 8
			(reduce using rule 1)

	')'            reduce using rule 1
	%eof           reduce using rule 1


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 6
Number of terminals: 6
Number of non-terminals: 2
Number of states: 13
